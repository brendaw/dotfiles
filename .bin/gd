#!/bin/bash

SCRIPT_NAME="gd"

HELP_ARG="--help"

BUILD_PACK_AND_UPDATE_CMD="bpu"
BUILD_AND_PACK_CMD="bp"
BUILD_CMD="build"
PACK_CMD="pack"
UPDATE_CMD="update"
REVERT_CMD="revert"
EXPORT_CMD="export"

function main {
    if [ -z "$1" ] || [[ "$1" == "$HELP_ARG" ]]; then
        help_message
    else
        check_args $1 $2
    fi
}

function check_args {
    if [[ "$1" == "$HELP_ARG" ]]; then
        help_message
    elif [[ "$1" == "$BUILD_PACK_AND_UPDATE_CMD" ]]; then
        build_pack_and_update
    elif [[ "$1" == "$BUILD_AND_PACK_CMD" ]]; then
        build_and_pack
    elif [[ "$1" == "$BUILD_CMD" ]]; then
        build
    elif [[ "$1" == "$PACK_CMD" ]]; then
        pack
    elif [[ "$1" == "$UPDATE_CMD" ]]; then
        update
    elif [[ "$1" == "$REVERT_CMD" ]]; then
        revert
    elif [[ "$1" == "$EXPORT_CMD" ]]; then
        export_game
    else
        command_not_found $1
    fi
}

function build {
    echo -e "$SCRIPT_NAME: Init custom Godot repository build"

    scons arch=arm64 platform=macos target=editor use_llvm=no -j4 vulkan_sdk_path=/Library/Graphics/VulkanSDK/1.3.268.1

    echo -e "$SCRIPT_NAME: Custom Godot repository build has ended."
}

function pack {
    echo -e "$SCRIPT_NAME: Packing Godot app from a custom repository build."

    cp -r misc/dist/macos_tools.app ./Godot.app
    mkdir -p Godot.app/Contents/MacOS
    cp bin/godot.macos.editor.arm64 Godot.app/Contents/MacOS/Godot
    chmod +x Godot.app/Contents/MacOS/Godot
    codesign --force --timestamp --options=runtime --entitlements misc/dist/macos/editor.entitlements -s - Godot.app

    rm -rf bin/Godot.app
    mv Godot.app bin/Godot.app
}

function build_and_pack {
    build
    pack
}

function update {
    echo -e "$SCRIPT_NAME: Update Applications Godot app with the custom repository build."

    cp -r /Applications/Godot.app bin/Godot.app.bak

    rm -rf /Applications/Godot.app

    cp -r bin/Godot.app /Applications/Godot.app

    echo -e "$SCRIPT_NAME: Finished update Applications Godot app with the custom repository build."
}

function build_pack_and_update {
    build
    pack
    update
}

function revert {
    echo -e "$SCRIPT_NAME: Reverting update Applications Godot app with the custom repository build."

    rm -rf /Applications/Godot.app

    cp -r bin/Godot.app.bak /Applications/Godot.app

    echo -e "$SCRIPT_NAME: Finished reverting update Applications Godot app with the custom repository build."
}

function export_game {
    echo -e "$SCRIPT_NAME: This option is not yet available. Check again soon!"
}

function help_message {
    echo -e "Godot command line helper.\n"
    echo -e "Usage: $SCRIPT_NAME <command>\n"
    echo -e "Available commands:\n"
    echo -e "\t build \t\tBuild custom local Godot repository.\n"
    echo -e "\t pack \t\tPacking Godot app from a custom repository build.\n"
    echo -e "\t bp \t\tBuild and pack Godot app from a custom repository build.\n"
    echo -e "\t update \t\tBuild and pack Godot app from a custom repository build.\n"
    echo -e "\t bpu \t\tBuild, pack, and update Godot app from a custom repository build.\n"
    echo -e "\t revert \Revert an update Godot app from a custom repository build.\n"
    echo -e "\t export \t\tExport a from command line. Not yet available.\n"
    echo -e "Type '$SCRIPT_NAME <command> --help' for more info."
}

function command_not_found {
    if [ -z "$2" ]; then
        echo "$SCRIPT_NAME: command not found: $1"
    else
        echo "$SCRIPT_NAME: $1: option not found: $2"
    fi
}

main "$@"

exit 0
